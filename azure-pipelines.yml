
trigger:
    - main

#checkout multiple repositories in the pipeline
resources:
  repositories:
  - repository: azureSharedTemplates
    type: github
    endpoint: ACRCode
    name: ACRCode/ADOCS-templates
    branch: master

  - repository: InfrastureAsCode
    type: github
    endpoint: ACRCode
    name: ACRCode/InfrastructureAsCode
    branch: main


extends:
  template: shared-template.yml@azureSharedTemplates #Refer to the resources section repo 1)
  parameters:
    buildVersionMajor: 1
    buildVersionMinor: 0
    buildSteps:
      - checkout: self
          
      #steps for packaging the lambda zip file
      - task: CmdLine@2
        inputs:
          script: |
            pip install --platform manylinux2014_x86_64 --target=$(Build.SourcesDirectory)/src --implementation cp --python-version 3.9 --only-binary=:all: --upgrade -r  $(Build.SourcesDirectory)\\requirements.txt
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/src'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip'
          replaceExistingArchive: true
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip'
          ArtifactName: 'AILAB.CloudModelEvaluation.CalculateMetrics'

      #steps for building the python executable
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
          addToPath: true
          architecture: 'x64'
      # Writes the current Python version to a pipeline variable
      # Allows for easier manipulation of the contents of dependencies to fix errors caused by PyInstaller (Python version is in file address)
      - task: PythonScript@0
        inputs:
          scriptSource: 'inline'
          script: |
            import os
            print (os.environ)
            from platform import python_version
            name = 'PYTHONVERSION'
            version = python_version()
            value = version
            print(f'##vso[task.setvariable variable={name};]{value}')
      #install our dependencies
      - task: CmdLine@2
        inputs:
          script: |
            pip install --upgrade -r $(Build.SourcesDirectory)\\requirements.txt
      - task: CmdLine@2
        inputs:
          script: |
            pip install pyinstaller
      # Downloads the UPX tool (file compressor)
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.0.2/upx-4.0.2-win64.zip" -OutFile "$(System.DefaultWorkingDirectory)/upx-4.0.2-win64.zip"
      # Extracts UPX
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: 'upx-4.0.2-win64.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/upx-4.0.2-win64'
          cleanDestinationFolder: true
          overwriteExistingFiles: true
      # build the executable
      - task: CmdLine@2
        inputs:
          script: |
            pyinstaller --onefile --upx-dir=$(System.DefaultWorkingDirectory)/upx-4.0.2-win64/upx-4.0.2-win64/ $(Build.SourcesDirectory)\\src\\main.py 
        displayName: 'Create Executable'


    useSelfHostedAgents: false
    buildPoolImage: 'windows-latest'
    securityScanAgentPool: 'Local Agents'
    runCheckMarxScan: false
    runIQScan: false
